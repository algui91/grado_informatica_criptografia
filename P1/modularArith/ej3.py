# -*- coding: utf-8 -*-
"""
Created on Sun Mar 15 10:22:47 2015

@author: Alejandro Alcalde (elbauldelprogramador.com)
"""

def main():
    a = 73208616291729490009973433121286344567434489939282793597607519000966996155360750368319793684412925463106458801305905417659505277658173580019690672647131149181691673085352991108383422899064111557676239886382393720679790707000007022943670027071869801952045077456667008417783362547455032994902700653449707460650861865827079710793628382710628215723590417499922623227328512330542136090646598393820931691345712444045913948265747291110928879288688808327471851465040466869820789521303662074003273766746823743
    k = 90221078753392184154149622269679731705920869572364323146777389106744249167893287091491005751893264013854756094230384816436985035887367570198390830836626929620930395458607390051335962764852769424941031051670131521265969408350800112779692655340042253991970492761524977413231930703094065023050574077317620529581736775256036443993928340221545607375549860405933153255776836414051570996984167934585339322850189347872718439350738428272565094611168867981011370318335242028953808721309056435214502065537377043
    n = 82563268684963857695571708424230247895816419992186358219973864238331858876541285801129764021236858643313425046128144252468059630014509834338631013842355691010537490258826553750776547160192338498875341853555042861897986186597802010217496968549748599326380261050800909318786838968674483065878197010958885061837926394606845958276126863840036553907121960728614130286429500164923361256517597406386446250859875617336676859837264460005193719960145142376300578089824105864847345849034742781300251412416008642
    
    #print str(a) + " times " + str(k) + " mod " + str(n) + " is " + str(powerModInt(a,k,n))
    print powerModInt(a,k,n)

def powerModInt(a,k,n):
    """
        @input a in Z_n and integers 0 <= k <= n in binary representation
        
        @outup a times k mod n
    """
    b = 1
    if k == 0:
        return b
    A = a
    if 1 & k: # If the least significant bit is 1, a^1 = a
        b = a
    k = k >> 1
    while k:
        A = (A**2) % n
        if 1 & k:
            b = (b * A) % n
        k = k >> 1
        
    return b

if __name__ == '__main__':
    main()